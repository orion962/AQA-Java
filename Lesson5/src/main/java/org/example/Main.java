package org.example;

/*
Задание 1:

Создать классы Собака и Кот с наследованием от класса Животное.

Все животные могут бежать и плыть. В качестве параметра каждому методу передается длина препятствия.
Результатом выполнения действия будет печать в консоль. (Например, dogBobik.run(150); -> 'Бобик пробежал 150 м.');

У каждого животного есть ограничения на действия (бег: кот 200 м., собака 500 м.; плавание: кот не умеет плавать,
собака 10 м.).

Добавить подсчет созданных котов, собак и животных.

Расширить задачу, добавив для котов возможность кушать из миски, выполнив следующие пункты:
Сделать так, чтобы в миске с едой не могло получиться отрицательного количества еды
(например, в миске 10 еды, а кот пытается покушать 15-20).
Каждому коту нужно добавить поле сытость (когда создаем котов, они голодны).
Если коту удалось покушать (хватило еды), сытость = true.
Считаем, что если коту мало еды в миске, то он её просто не трогает,
то есть не может быть наполовину сыт (это сделано для упрощения логики программы).
Создать массив котов и миску с едой, попросить всех котов покушать из этой миски и
потом вывести информацию о сытости котов в консоль.
Добавить метод, с помощью которого можно было бы добавлять еду в миску.

Задание 2:

Применяя интерфейсы написать программу расчета периметра и площади геометрических
фигур: круг, прямоугольник, треугольник.
Задать для каждой фигуры цвет заливки и цвет границы.
Результат полученных характеристик [ Периметр, площадь, цвет фона, цвет границ ] по
каждой фигуре вывести в консоль.


Попробуйте реализовать базовые методы, такие как расчет периметра фигур,
в качестве дефолтных методов в интерфейсе.
 */

public class Main {
    public static void main(String[] args) {
        ////////////////////////////////////////////// задание 1
        Animal an1 = new Animal("Борис");
        Animal an2 = new Animal("Иннокентий");
        Cat cat1 = new Cat("Барсик");
        Cat cat2 = new Cat("Вурсик");
        Cat cat3 = new Cat("Мальвина");
        Dog dog1 = new Dog("Дружок");
        Dog dog2 = new Dog("Пирожок");
        ///////////////////////////////////////////////
        an1.run(125);
        an2.swim(20);
        cat1.run(135);
        cat2.swim(34);
        cat3.run(250);
        dog1.run(350);
        dog2.swim(12);
        ///////////////////////////////////////////////
        System.out.println(Animal.numberOfAnimals);
        System.out.println(Cat.numberOfCats);
        System.out.println(Dog.numberOfDogs);
        ///////////////////////////////////////////////
        Bowl bowl = new Bowl(100);
        Cat[] arr = {cat1, cat2, cat3};
        for (int i = 0; i < arr.length; ++i)
        {
            arr[i].eat(40, bowl);
            arr[i].getSatiety();
        }
        System.out.println(bowl.getFood());
        bowl.addFood(30);
        System.out.println(bowl.getFood());
        arr[2].eat(40, bowl);
        arr[2].getSatiety();
        /////////////////////////////////////////////// задание 2
        Circle circle = new Circle(2.5, "красный", "чёрный");
        Rectangle rect = new Rectangle(3.5, 4.9, "жёлтый", "синий");
        Triangle trg = new Triangle(3, 4, 5, "зелёный", "фиолетовый");
        circle.figureInfo();
        rect.figureInfo();
        trg.figureInfo();
    }
}